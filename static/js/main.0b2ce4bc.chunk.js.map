{"version":3,"sources":["DictionaryState.ts","DictionaryItemCard.tsx","StateLoader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DictionaryActionType","CardStateReducer","state","action","current","items","changed","type","UPDATE_CURRENT","Object","objectSpread","payload","map","item","id","INIT","length","SAVED","STATE","_action$payload","NEXT","reduce","acc","cur","i","initialState","DictionaryItemCard","props","react_default","a","createElement","Card","border","isKnown","undefined","Body","Title","word","description","Text","Footer","Row","Col","Button","onClick","onChange","variant","block","StateLoader","fileInput","useRef","className","ref","accept","files","file","reader","FileReader","onload","result","newState","JSON","parse","dispatch","readAsText","click","saveAs","File","stringify","App","_useDictionaryState","_useReducer","useReducer","_useReducer2","slicedToArray","useDictionaryState","_useDictionaryState2","Container","md","assign","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0b2ce4bc.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nexport interface DictionaryItem {\n  id: string;\n  word: string;\n  description?: string;\n  isKnown: boolean;\n}\n\nexport interface DictionaryState {\n  current?: Readonly<DictionaryItem>;\n  items: ReadonlyArray<Readonly<DictionaryItem>>;\n  changed: Boolean;\n}\n\nexport enum DictionaryActionType {\n  UPDATE_CURRENT,\n  NEXT,\n  INIT,\n  SAVED,\n  STATE\n}\n\ninterface DictionaryActionUpdateCurrent {\n  type: DictionaryActionType.UPDATE_CURRENT;\n  payload: Partial<DictionaryItem>;\n}\n\ninterface DictionaryActionState {\n  type: DictionaryActionType.STATE;\n  payload: DictionaryState;\n}\n\ninterface DictionaryActionDefault {\n  type:\n    | DictionaryActionType.NEXT\n    | DictionaryActionType.INIT\n    | DictionaryActionType.SAVED;\n}\n\nexport type DictionaryAction =\n  | DictionaryActionUpdateCurrent\n  | DictionaryActionDefault\n  | DictionaryActionState;\n\nfunction CardStateReducer(state: DictionaryState, action: DictionaryAction) {\n  let { current, items, changed } = state;\n\n  switch (action.type) {\n    case DictionaryActionType.UPDATE_CURRENT: {\n      if (current) {\n        current = { ...current, ...action.payload } as DictionaryItem;\n        items = items.map(item =>\n          current != null && item.id === current.id ? current : item\n        );\n        changed = true;\n      }\n\n      break;\n    }\n    case DictionaryActionType.INIT: {\n      if (current == null && items.length > 0) {\n        current = items[0];\n      }\n\n      break;\n    }\n    case DictionaryActionType.SAVED: {\n      changed = false;\n\n      break;\n    }\n    case DictionaryActionType.STATE: {\n      ({ current, items } = action.payload);\n      changed = false;\n\n      break;\n    }\n    case DictionaryActionType.NEXT: {\n      if (items.length > 1) {\n        current = items.reduce((acc, cur, i) =>\n          current && items[i - 1].id === current.id ? cur : acc\n        );\n\n        changed = true;\n      }\n\n      break;\n    }\n  }\n\n  return { current, items, changed } as DictionaryState;\n}\n\nconst initialState: DictionaryState = {\n  items: [],\n  changed: false\n};\n\nexport function useDictionaryState(): [\n  DictionaryState,\n  (action: DictionaryAction) => void\n] {\n  // @ts-ignore\n  const [state, dispatch] = useReducer(CardStateReducer, initialState, {\n    type: DictionaryActionType.INIT\n  });\n\n  return [state, dispatch];\n}\n","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { DictionaryItem } from \"./DictionaryState\";\n\ninterface WordCardProps extends DictionaryItem {\n  onChange?: (updated: Partial<DictionaryItem>) => void;\n}\n\nexport function DictionaryItemCard<T extends WordCardProps>(props: T) {\n  return (\n    <Card border={props.isKnown ? \"success\" : undefined}>\n      <Card.Body>\n        <Card.Title>{props.word}</Card.Title>\n        {props.description != null && props.description.length > 0 ? (\n          <Card.Text>{props.description}</Card.Text>\n        ) : (\n          false\n        )}\n      </Card.Body>\n      <Card.Footer>\n        <Row>\n          <Col>\n            <Button\n              onClick={() =>\n                props.onChange && props.onChange({ isKnown: false })\n              }\n              variant={\"light\"}\n              block\n            >\n              I don't know\n            </Button>\n          </Col>\n          <Col>\n            <Button\n              onClick={() =>\n                props.onChange && props.onChange({ isKnown: true })\n              }\n              variant={\"success\"}\n              block\n            >\n              I know\n            </Button>\n          </Col>\n        </Row>\n      </Card.Footer>\n    </Card>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport { saveAs } from \"file-saver\";\nimport {\n  DictionaryAction,\n  DictionaryActionType,\n  DictionaryState\n} from \"./DictionaryState\";\n\nexport function StateLoader(props: {\n  state: DictionaryState;\n  dispatch: (action: DictionaryAction) => void;\n}) {\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleFiles = () => {\n    if (fileInput.current == null) {\n      return;\n    }\n\n    const files = fileInput.current.files;\n    if (files == null) {\n      return;\n    }\n\n    const file = files.item(0);\n    if (file == null) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (typeof reader.result === \"string\") {\n        const newState = JSON.parse(reader.result);\n\n        props.dispatch({ type: DictionaryActionType.STATE, payload: newState });\n      }\n    };\n\n    reader.readAsText(file);\n  };\n\n  const handleLoad = () => {\n    if (fileInput.current != null) {\n      fileInput.current.click();\n    }\n  };\n\n  const handleSave = () => {\n    saveAs(\n      new File([JSON.stringify(props.state)], \"dictionary.json\", {\n        type: \"application/octet-stream\"\n      })\n    );\n\n    props.dispatch({ type: DictionaryActionType.SAVED });\n  };\n\n  return (\n    <Row className=\"mx-2\">\n      <Col>\n        <input\n          ref={fileInput}\n          type=\"file\"\n          accept=\"application/json\"\n          className=\"d-none\"\n          onChange={handleFiles}\n        />\n        <Button\n          block\n          onClick={handleLoad}\n          variant={props.state.items.length === 0 ? \"primary\" : \"light\"}\n        >\n          Load\n        </Button>\n      </Col>\n      <Col>\n        <Button\n          block\n          onClick={handleSave}\n          variant={props.state.changed ? \"primary\" : \"light\"}\n        >\n          Save\n        </Button>\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { DictionaryActionType, useDictionaryState } from \"./DictionaryState\";\nimport { DictionaryItemCard } from \"./DictionaryItemCard\";\nimport { StateLoader } from \"./StateLoader\";\n\nfunction App() {\n  const [state, dispatch] = useDictionaryState();\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"6\" className=\"mt-5 mb-5\">\n          {state.current != null ? (\n            <DictionaryItemCard\n              {...state.current}\n              onChange={data => {\n                dispatch({\n                  type: DictionaryActionType.UPDATE_CURRENT,\n                  payload: data\n                });\n                dispatch({\n                  type: DictionaryActionType.NEXT\n                });\n              }}\n            />\n          ) : (\n            \"Dictionary is empty\"\n          )}\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"6\" className=\"mb-5\">\n          <StateLoader dispatch={dispatch} state={state} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}